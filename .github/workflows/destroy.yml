name: 🗑️ Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      preserve_state:
        description: 'Preserve S3 state bucket and core resources'
        required: false
        default: 'true'
        type: boolean
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string
      force_cleanup:
        description: 'Force cleanup of stuck resources'
        required: false
        default: 'false'
        type: boolean

jobs:
  destroy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: ✋ Validate Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "❌ Destruction not confirmed. You must type 'DESTROY' to proceed."
            exit 1
          fi
          echo "✅ Destruction confirmed"

      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: 🛠️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: 🔄 Terraform Init
        working-directory: infra
        run: terraform init

      - name: 📊 Current Infrastructure Status
        working-directory: infra
        run: |
          echo "## 📊 Current Infrastructure" >> $GITHUB_STEP_SUMMARY
          
          # Get current resource count
          CURRENT_RESOURCES=$(terraform state list | wc -l)
          echo "- **Current Resources in State:** $CURRENT_RESOURCES" >> $GITHUB_STEP_SUMMARY
          
          # Check if infrastructure is actually running
          if aws ecs describe-clusters --clusters hello-fargate --query 'clusters[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
            echo "- **ECS Cluster:** 🟢 Active" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **ECS Cluster:** 🔴 Not found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if aws elbv2 describe-load-balancers --names hello-fargate-alb --query 'LoadBalancers[0].State.Code' --output text 2>/dev/null | grep -q "active"; then
            echo "- **Load Balancer:** 🟢 Active" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Load Balancer:** 🔴 Not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📋 Show Resources to Destroy
        working-directory: infra
        run: |
          echo "## 🗑️ Resources to be Destroyed" >> $GITHUB_STEP_SUMMARY
          terraform plan -destroy -no-color | tee destroy_plan.txt
          
          # Extract resource counts
          TO_DESTROY=$(grep -o "Plan: [0-9]* to add, [0-9]* to change, [0-9]* to destroy" destroy_plan.txt | grep -o "[0-9]* to destroy" | grep -o "[0-9]*" || echo "0")
          
          echo "### 📊 Destruction Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ **Resources to Destroy:** $TO_DESTROY" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 💰 Monthly Cost Savings" >> $GITHUB_STEP_SUMMARY
          echo "After destruction, you will save approximately **$150-170/month**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🏗️ Resources Being Destroyed" >> $GITHUB_STEP_SUMMARY
          echo "- VPC and all networking components" >> $GITHUB_STEP_SUMMARY
          echo "- ECS Fargate cluster and service" >> $GITHUB_STEP_SUMMARY
          echo "- Application Load Balancer" >> $GITHUB_STEP_SUMMARY
          echo "- NAT Gateways and Elastic IPs" >> $GITHUB_STEP_SUMMARY
          echo "- Security Groups and Route Tables" >> $GITHUB_STEP_SUMMARY
          echo "- CloudWatch Logs and Alarms" >> $GITHUB_STEP_SUMMARY
          echo "- SSL Certificate" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.preserve_state }}" = "false" ]; then
            echo "- ⚠️ **S3 State Bucket** (will be destroyed)" >> $GITHUB_STEP_SUMMARY
            echo "- ⚠️ **Secrets Manager Secret** (will be destroyed)" >> $GITHUB_STEP_SUMMARY
            echo "- ⚠️ **GitHub Actions IAM Role** (will be destroyed)" >> $GITHUB_STEP_SUMMARY
            echo "- ⚠️ **ECR Repository** (will be destroyed)" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🛡️ Preserved Resources" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ S3 State Bucket (preserved for future deployments)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Secrets Manager Secret (preserved)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ GitHub Actions IAM Role (preserved)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ ECR Repository (preserved)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🗑️ Destroy Infrastructure
        working-directory: infra
        run: |
          echo "🗑️ Starting infrastructure destruction..."
          
          if [ "${{ github.event.inputs.preserve_state }}" = "true" ]; then
            echo "🛡️ Preserving core resources for future deployments..."
            # Remove core resources from state temporarily to preserve them
            terraform state rm aws_secretsmanager_secret.db_connection || true
            terraform state rm aws_secretsmanager_secret_version.db_connection || true
            terraform state rm aws_iam_role.github_actions || true
            terraform state rm aws_iam_role_policy_attachment.github_actions_admin || true
          fi
          
          terraform destroy -auto-approve
          echo "## ✅ Destruction Complete" >> $GITHUB_STEP_SUMMARY

      - name: 🧹 Force Cleanup Stuck Resources
        if: ${{ github.event.inputs.force_cleanup == 'true' }}
        run: |
          echo "🧹 Force cleaning potentially stuck resources..."
          
          # Clean up any remaining NAT Gateways
          echo "Checking for remaining NAT Gateways..."
          aws ec2 describe-nat-gateways --filter "Name=tag:Name,Values=hello-fargate-nat-*" --query 'NatGateways[?State==`available`].NatGatewayId' --output text | while read nat_id; do
            if [ ! -z "$nat_id" ]; then
              echo "Deleting NAT Gateway: $nat_id"
              aws ec2 delete-nat-gateway --nat-gateway-id $nat_id || true
            fi
          done
          
          # Clean up any remaining Elastic IPs
          echo "Checking for remaining Elastic IPs..."
          aws ec2 describe-addresses --filters "Name=tag:Name,Values=hello-fargate-nat-eip-*" --query 'Addresses[].AllocationId' --output text | while read eip_id; do
            if [ ! -z "$eip_id" ]; then
              echo "Releasing Elastic IP: $eip_id"
              aws ec2 release-address --allocation-id $eip_id || true
            fi
          done
          
          # Clean up any remaining security groups
          echo "Checking for remaining security groups..."
          aws ec2 describe-security-groups --filters "Name=group-name,Values=hello-fargate-*" --query 'SecurityGroups[].GroupId' --output text | while read sg_id; do
            if [ ! -z "$sg_id" ]; then
              echo "Deleting Security Group: $sg_id"
              aws ec2 delete-security-group --group-id $sg_id || true
            fi
          done
          
          echo "## 🧹 Force Cleanup Complete" >> $GITHUB_STEP_SUMMARY

      - name: 🧹 Additional Cleanup
        if: ${{ github.event.inputs.preserve_state == 'false' }}
        run: |
          echo "🧹 Performing additional cleanup..."
          
          # Delete ECR repository and images
          echo "Deleting ECR repository..."
          aws ecr delete-repository --repository-name hello-fargate --force || true
          
          # Delete S3 state bucket if not preserving
          echo "Deleting S3 state bucket..."
          aws s3 rm s3://hello-fargate-terraform-state --recursive || true
          aws s3api delete-bucket --bucket hello-fargate-terraform-state || true
          
          # Delete GitHub Actions role if not preserving
          echo "Deleting GitHub Actions role..."
          aws iam detach-role-policy --role-name github-actions-role --policy-arn arn:aws:iam::aws:policy/AdministratorAccess || true
          aws iam delete-role --role-name github-actions-role || true
          
          # Delete OIDC provider if no other roles use it
          echo "Checking OIDC provider usage..."
          OIDC_USAGE=$(aws iam list-roles --query 'Roles[?contains(AssumeRolePolicyDocument, `token.actions.githubusercontent.com`)]' --output text | wc -l)
          if [ "$OIDC_USAGE" -eq "0" ]; then
            echo "Deleting unused OIDC provider..."
            aws iam delete-open-id-connect-provider --open-id-connect-provider-arn "arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):oidc-provider/token.actions.githubusercontent.com" || true
          fi
          
          echo "## 🧹 Complete Cleanup Finished" >> $GITHUB_STEP_SUMMARY
          echo "All resources including state management have been destroyed." >> $GITHUB_STEP_SUMMARY

      - name: 🔍 Verify Cleanup
        run: |
          echo "🔍 Verifying cleanup completion..."
          
          # Check for remaining resources
          REMAINING_VPCS=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=hello-fargate-vpc" --query 'Vpcs' --output text | wc -l)
          REMAINING_CLUSTERS=$(aws ecs describe-clusters --clusters hello-fargate --query 'clusters[?status==`ACTIVE`]' --output text 2>/dev/null | wc -l || echo "0")
          REMAINING_ALBS=$(aws elbv2 describe-load-balancers --names hello-fargate-alb --query 'LoadBalancers' --output text 2>/dev/null | wc -l || echo "0")
          
          echo "## 🔍 Cleanup Verification" >> $GITHUB_STEP_SUMMARY
          echo "- **VPCs:** $REMAINING_VPCS remaining" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Clusters:** $REMAINING_CLUSTERS remaining" >> $GITHUB_STEP_SUMMARY
          echo "- **Load Balancers:** $REMAINING_ALBS remaining" >> $GITHUB_STEP_SUMMARY
          
          if [ "$REMAINING_VPCS" -eq "0" ] && [ "$REMAINING_CLUSTERS" -eq "0" ] && [ "$REMAINING_ALBS" -eq "0" ]; then
            echo "- ✅ **Status:** All infrastructure successfully destroyed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ **Status:** Some resources may still be terminating" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📊 Cleanup Summary
        run: |
          echo "## 🎯 Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.preserve_state }}" = "true" ]; then
            echo "✅ **Infrastructure:** Destroyed" >> $GITHUB_STEP_SUMMARY
            echo "🛡️ **Core Resources:** Preserved for future deployments" >> $GITHUB_STEP_SUMMARY
            echo "💰 **Cost Savings:** ~$150-170/month" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🚀 To Redeploy Later" >> $GITHUB_STEP_SUMMARY
            echo "Simply push to main branch or run the Deploy workflow" >> $GITHUB_STEP_SUMMARY
            echo "No additional setup required!" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Everything:** Completely destroyed" >> $GITHUB_STEP_SUMMARY
            echo "💰 **Cost Savings:** ~$150-170/month + storage costs" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ⚠️ To Redeploy Later" >> $GITHUB_STEP_SUMMARY
            echo "Run the setup script: \`./setup.sh\`" >> $GITHUB_STEP_SUMMARY
            echo "Then push to main branch to deploy" >> $GITHUB_STEP_SUMMARY
          fi
