name: Destroy Infrastructure

on:
  workflow_dispatch:

jobs:
  destroy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Delete AWS Resources
        run: |
          echo "Cleaning up AWS resources..."
          
          # Get VPC ID first
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=hello-fargate-vpc" --query 'Vpcs[0].VpcId' --output text 2>/dev/null || echo "None")
          echo "VPC ID: $VPC_ID"
          
          # Delete ECS service first (if exists)
          echo "Deleting ECS service..."
          aws ecs update-service --cluster hello-fargate --service hello-fargate --desired-count 0 2>/dev/null || true
          sleep 30
          aws ecs delete-service --cluster hello-fargate --service hello-fargate 2>/dev/null || true
          aws ecs delete-cluster --cluster hello-fargate 2>/dev/null || true
          
          # Delete ALB and wait for completion
          echo "Deleting ALB..."
          ALB_ARN=$(aws elbv2 describe-load-balancers --names hello-fargate-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text 2>/dev/null || echo "None")
          if [ "$ALB_ARN" != "None" ]; then
            aws elbv2 delete-load-balancer --load-balancer-arn $ALB_ARN
            echo "Waiting for ALB deletion..."
            aws elbv2 wait load-balancer-not-exists --load-balancer-arns $ALB_ARN || sleep 120
          fi
          
          # Delete target group
          echo "Deleting target group..."
          TG_ARN=$(aws elbv2 describe-target-groups --names hello-fargate-tg --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null || echo "None")
          if [ "$TG_ARN" != "None" ]; then
            aws elbv2 delete-target-group --target-group-arn $TG_ARN || true
          fi
          
          # Delete ECR repository
          echo "Deleting ECR repository..."
          aws ecr delete-repository --repository-name hello-fargate --force || true
          
          if [ "$VPC_ID" != "None" ]; then
            echo "Cleaning up VPC resources for $VPC_ID..."
            
            # Release and delete Elastic IPs
            echo "Releasing Elastic IPs..."
            aws ec2 describe-addresses --filters "Name=domain,Values=vpc" --query 'Addresses[].AllocationId' --output text | xargs -n1 -I {} aws ec2 release-address --allocation-id {} 2>/dev/null || true
            
            # Delete NAT Gateways (if any)
            echo "Deleting NAT Gateways..."
            aws ec2 describe-nat-gateways --filter "Name=vpc-id,Values=$VPC_ID" --query 'NatGateways[].NatGatewayId' --output text | xargs -n1 -I {} aws ec2 delete-nat-gateway --nat-gateway-id {} 2>/dev/null || true
            sleep 60
            
            # Delete network interfaces
            echo "Deleting network interfaces..."
            aws ec2 describe-network-interfaces --filters "Name=vpc-id,Values=$VPC_ID" --query 'NetworkInterfaces[].NetworkInterfaceId' --output text | xargs -n1 -I {} aws ec2 delete-network-interface --network-interface-id {} 2>/dev/null || true
            
            # Delete route table associations first
            echo "Deleting route table associations..."
            aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPC_ID" --query 'RouteTables[].Associations[?Main!=`true`].RouteTableAssociationId' --output text | xargs -n1 -I {} aws ec2 disassociate-route-table --association-id {} 2>/dev/null || true
            
            # Delete custom routes
            echo "Deleting custom routes..."
            aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPC_ID" --query 'RouteTables[?Associations[0].Main!=`true`].RouteTableId' --output text | while read RT_ID; do
              aws ec2 describe-route-tables --route-table-ids $RT_ID --query 'RouteTables[0].Routes[?GatewayId!=`local`].DestinationCidrBlock' --output text | while read CIDR; do
                aws ec2 delete-route --route-table-id $RT_ID --destination-cidr-block $CIDR 2>/dev/null || true
              done
            done
            
            # Delete internet gateway
            echo "Deleting internet gateway..."
            IGW_ID=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID" --query 'InternetGateways[0].InternetGatewayId' --output text 2>/dev/null || echo "None")
            if [ "$IGW_ID" != "None" ]; then
              aws ec2 detach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id $VPC_ID || true
              aws ec2 delete-internet-gateway --internet-gateway-id $IGW_ID || true
            fi
            
            # Delete subnets
            echo "Deleting subnets..."
            aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[].SubnetId' --output text | xargs -n1 -I {} aws ec2 delete-subnet --subnet-id {} || true
            
            # Delete security groups (except default)
            echo "Deleting security groups..."
            aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text | xargs -n1 -I {} aws ec2 delete-security-group --group-id {} || true
            
            # Delete route tables (except main)
            echo "Deleting route tables..."
            aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPC_ID" --query 'RouteTables[?Associations[0].Main!=`true`].RouteTableId' --output text | xargs -n1 -I {} aws ec2 delete-route-table --route-table-id {} || true
            
            # Finally delete VPC
            echo "Deleting VPC..."
            aws ec2 delete-vpc --vpc-id $VPC_ID || true
          fi
          
          echo "Cleanup completed!"
